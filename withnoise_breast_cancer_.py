# -*- coding: utf-8 -*-
"""withnoise breast cancer .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tQB1UdYT8TYTbU2uw567SY1VhniVpUm8
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import random

# -------------------------
# Load data
# -------------------------
data = load_breast_cancer()
X, y = data.data, data.target

# Split clean data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# -------------------------
# Train on clean data
# -------------------------
models = {
    "Logistic Regression": LogisticRegression(max_iter=5000),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric="logloss")
}

results = {}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    y_prob = model.predict_proba(X_test_scaled)[:,1]
    results[(name, "Clean")] = {
        "Accuracy": accuracy_score(y_test, y_pred),
        "Precision": precision_score(y_test, y_pred),
        "Recall": recall_score(y_test, y_pred),
        "F1": f1_score(y_test, y_pred),
        "AUC": roc_auc_score(y_test, y_prob)
    }

# -------------------------
# Add noise: flip labels + missing + outliers
# -------------------------
y_noisy = y.copy()
flip_idx = np.random.choice(len(y_noisy), size=int(0.1*len(y_noisy)), replace=False)
y_noisy[flip_idx] = 1 - y_noisy[flip_idx]  # flip 10% labels

X_noisy = X.copy()
# introduce missing values in 15% randomly
mask = np.random.rand(*X_noisy.shape) < 0.15
X_noisy[mask] = np.nan
# introduce outliers in 5% randomly
outlier_idx = np.random.choice(X_noisy.shape[0], size=int(0.05*X_noisy.shape[0]), replace=False)
feature_idx = np.random.choice(X_noisy.shape[1], size=int(0.05*X_noisy.shape[1]), replace=False)
X_noisy[outlier_idx[:, None], feature_idx] = X_noisy[outlier_idx[:, None], feature_idx] * 10

# Handle missing by filling with mean (simple imputation)
X_noisy = pd.DataFrame(X_noisy).fillna(pd.DataFrame(X_noisy).mean()).values

# Split noisy data
Xn_train, Xn_test, yn_train, yn_test = train_test_split(X_noisy, y_noisy, test_size=0.2, random_state=42, stratify=y_noisy)
Xn_train_scaled = scaler.fit_transform(Xn_train)
Xn_test_scaled = scaler.transform(Xn_test)

# Train models on noisy data
for name, model in models.items():
    model.fit(Xn_train_scaled, yn_train)
    y_pred = model.predict(Xn_test_scaled)
    y_prob = model.predict_proba(Xn_test_scaled)[:,1]
    results[(name, "Noisy")] = {
        "Accuracy": accuracy_score(yn_test, y_pred),
        "Precision": precision_score(yn_test, y_pred),
        "Recall": recall_score(yn_test, y_pred),
        "F1": f1_score(yn_test, y_pred),
        "AUC": roc_auc_score(yn_test, y_prob)
    }

# -------------------------
# Display results
# -------------------------
df_results = pd.DataFrame(results).T
print(df_results)

# -------------------------
# Plot ROC Curves
# -------------------------
plt.figure(figsize=(12,5))

# Clean Data ROC
plt.subplot(1,2,1)
for name, model in models.items():
    fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test_scaled)[:,1])
    plt.plot(fpr, tpr, label=f"{name}")
plt.plot([0,1],[0,1],'k--')
plt.title("ROC - Clean Data")
plt.xlabel("FPR"); plt.ylabel("TPR")
plt.legend()

# Noisy Data ROC
plt.subplot(1,2,2)
for name, model in models.items():
    fpr, tpr, _ = roc_curve(yn_test, model.predict_proba(Xn_test_scaled)[:,1])
    plt.plot(fpr, tpr, label=f"{name}")
plt.plot([0,1],[0,1],'k--')
plt.title("ROC - Noisy Data")
plt.xlabel("FPR"); plt.ylabel("TPR")
plt.legend()

plt.tight_layout()
plt.show()

"""Data collection & processing

"""

